/*
Deployment script for M2-Project

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "M2-Project"
:setvar DefaultFilePrefix "M2-Project"
:setvar DefaultDataPath "C:\Users\James Chan\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\James Chan\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Admins]...';


GO
CREATE TABLE [dbo].[Admins] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [UserName]  NVARCHAR (30) NOT NULL,
    [FirstName] NVARCHAR (50) NOT NULL,
    [LastName]  NVARCHAR (50) NOT NULL,
    [Nickname]  NVARCHAR (15) NOT NULL,
    [Email]     NVARCHAR (25) NOT NULL,
    [Password]  NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Barangay]...';


GO
CREATE TABLE [dbo].[Barangay] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [BarangayName] NVARCHAR (50) NOT NULL,
    [City]         NVARCHAR (50) NULL,
    [Zip]          INT           NOT NULL,
    [District]     NVARCHAR (50) NOT NULL,
    [Province]     NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Barangay_Employee]...';


GO
CREATE TABLE [dbo].[Barangay_Employee] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]  NVARCHAR (50) NOT NULL,
    [LastName]   NVARCHAR (50) NOT NULL,
    [Gender]     NVARCHAR (50) NOT NULL,
    [Email]      NVARCHAR (50) NOT NULL,
    [Address]    NVARCHAR (50) NOT NULL,
    [DateJoined] DATETIME2 (7) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Posts_Employee]...';


GO
CREATE TABLE [dbo].[Posts_Employee] (
    [Id]         INT             IDENTITY (1, 1) NOT NULL,
    [AdminId]    INT             NOT NULL,
    [Position]   NVARCHAR (50)   NOT NULL,
    [LastName]   NVARCHAR (50)   NOT NULL,
    [FirstName]  NVARCHAR (50)   NOT NULL,
    [CurrentPay] DECIMAL (18, 2) NOT NULL,
    [DateJoined] DATETIME2 (7)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Salary]...';


GO
CREATE TABLE [dbo].[Salary] (
    [Id]           INT             IDENTITY (1, 1) NOT NULL,
    [BarangayName] NVARCHAR (50)   NOT NULL,
    [LastName]     NVARCHAR (50)   NOT NULL,
    [FirstName]    NVARCHAR (50)   NOT NULL,
    [Position]     NVARCHAR (50)   NOT NULL,
    [CurrentPay]   DECIMAL (18, 2) NOT NULL,
    [TotalPay]     DECIMAL (18, 2) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Posts_Employee_Admins]...';


GO
ALTER TABLE [dbo].[Posts_Employee]
    ADD CONSTRAINT [FK_Posts_Employee_Admins] FOREIGN KEY ([AdminId]) REFERENCES [dbo].[Admins] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spAdd_Barangay_Employee]...';


GO
CREATE PROCEDURE [dbo].[spAdd_Barangay_Employee]
	@firstName nvarchar(50),
	@lastName nvarchar(50),
	@gender nvarchar(50),
	@email nvarchar(50),
	@address nvarchar(50),
	@dateJoined datetime2
AS
begin
	INSERT INTO dbo.Barangay_Employee
		(FirstName, LastName, Gender, Email, Address, DateJoined)
		VALUES (@firstName, @lastName, @gender, @email, @address, @dateJoined)
end
GO
PRINT N'Creating Procedure [dbo].[spAdmin_Update]...';


GO
CREATE PROCEDURE [dbo].[spAdmin_Update]
	@adminId int,
	@userName nvarchar(30),
	@firstName nvarchar(30),
	@lastName nvarchar(25),
	@nickName nvarchar(15),
	@email nvarchar(30),
	@password nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Admins
	SET 
		UserName = @userName, 
		FirstName = @firstName, 
		LastName = @lastName,
		Nickname = @nickName,
		Email = @email,
		Password = @password
	WHERE Id = @adminId;
end
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spAdmins_Authenticate]...';


GO
CREATE PROCEDURE [dbo].[spAdmins_Authenticate]
	@username nvarchar(30),
	@password nvarchar(30)
AS
begin

	set nocount on;
	SELECT [Id], [UserName], [FirstName], [LastName], [Nickname], [Email], [Password]
	FROM dbo.Admins
	WHERE UserName = @username
	AND Password = @password;

end

RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spAdmins_Register]...';


GO
CREATE PROCEDURE [dbo].[spAdmins_Register]
	@userName nvarchar(30),
	@firstName nvarchar(50),
	@lastName nvarchar(50),
	@nickName nvarchar(15),
	@email nvarchar(25),
	@password nvarchar(30)
AS
begin
	set nocount on;

	INSERT INTO dbo.Admins
		(UserName, FirstName, LastName, Nickname, Email, Password)
		VALUES (@userName, @firstName, @lastName, @nickName, @email, @password)
end
GO
PRINT N'Creating Procedure [dbo].[spDelete_Barangay_Employee]...';


GO
CREATE PROCEDURE [dbo].[spDelete_Barangay_Employee]
	@barangayEmployeeId int
AS
begin
	DELETE FROM dbo.Barangay_Employee
	WHERE [Id] = @barangayEmployeeId
end
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spPosts_Delete]...';


GO
CREATE PROCEDURE [dbo].[spPosts_Delete]
	@postsEmployeeId int
AS
begin
	DELETE FROM dbo.Posts_Employee
	WHERE [Id] = @postsEmployeeId
end
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spPosts_Detail]...';


GO
CREATE PROCEDURE [dbo].[spPosts_Detail]
	@id int
AS
begin
	SELECT [p].[Id], [p].[Position], [p].[CurrentPay], [u].[LastName], [u].[FirstName], [p].[DateJoined]
	FROM dbo.Posts_Employee p
	INNER JOIN dbo.Barangay_Employee u
	ON p.AdminId = u.Id
	WHERE p.Id = @id;
end

RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spPosts_Insert]...';


GO
CREATE PROCEDURE [dbo].[spPosts_Insert]
	@adminId int,
	@position nvarchar(50),
	@lastName nvarchar(50),
	@firstName nvarchar(50),
	@currentPay decimal(18, 2),
	@dateJoined datetime2
AS
begin
	INSERT INTO dbo.Posts_Employee
		(AdminId, Position, LastName, FirstName, CurrentPay, DateJoined)
		VALUES (@adminId, @position, @lastName, @firstName, @currentPay, @dateJoined)
end
GO
PRINT N'Creating Procedure [dbo].[spPosts_List]...';


GO
CREATE PROCEDURE [dbo].[spPosts_List]
AS
begin
	set nocount on;

	SELECT [p].[Id], [p].[AdminId], [p].[Position], [p].[CurrentPay], [p].[LastName], [p].[FirstName], [p].[DateJoined]
	FROM dbo.Posts_Employee p
end
GO
PRINT N'Creating Procedure [dbo].[spPosts_Update]...';


GO
CREATE PROCEDURE [dbo].[spPosts_Update]
    @adminId INT,
    @position NVARCHAR(50),
    @lastName NVARCHAR(50),
    @firstName NVARCHAR(50),
    @currentPay DECIMAL(18, 2),
    @dateJoined DATETIME2
AS
BEGIN
    UPDATE dbo.Posts_Employee
    SET
        AdminId = @adminId,
        Position = @position,
        LastName = @lastName,
        FirstName = @firstName,
        CurrentPay = @currentPay,
        DateJoined = @dateJoined
    WHERE
        Id = @adminId;
END
GO
PRINT N'Creating Procedure [dbo].[spUpdate_Barangay_Employee]...';


GO
CREATE PROCEDURE [dbo].[spUpdate_Barangay_Employee]
	@adminId INT,
	@firstName nvarchar(50),
	@lastName nvarchar(50),
	@gender nvarchar(50),
	@email nvarchar(50),
	@address nvarchar(50),
	@dateJoined datetime2
AS
BEGIN
	UPDATE dbo.Barangay_Employee
	SET FirstName = @firstName,
		LastName = @lastName,
		Gender = @gender,
		Email = @email,
		Address = @address,
		DateJoined = @dateJoined
	WHERE Id = @adminId;
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
